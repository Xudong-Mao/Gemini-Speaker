import asyncio
import base64
import json
import io
import os
import sys
import pyaudio
from rich import color, console
from websockets.asyncio.client import connect
from websockets.asyncio.connection import Connection
from rich.console import Console
from rich.markdown import Markdown
from dotenv import load_dotenv

load_dotenv()

if sys.version_info < (3, 11, 0):
    import taskgroup, exceptiongroup

    asyncio.TaskGroup = taskgroup.TaskGroup
    asyncio.ExceptionGroup = exceptiongroup.ExceptionGroup

F = pyaudio.paInt16
C = 1
SSR = 16000
RSR = 24000
CS = 512

h = "generativelanguage.googleapis.com"
m = "gemini-2.0-flash-exp"

ak = os.getenv("GOOGLE_API_KEY")

u = f"wss://{h}/ws/google.ai.generativelanguage.v1alpha.GenerativeService.BidiGenerateContent?key={ak}"

class AL:
    def __init__(self):
        self.ws = None
        self.q = asyncio.Queue()
        self.s = 0

    async def srt(self):
        sm = {"setup": {"model": f"models/{m}", "generation_config": {"response_modalities": ["TEXT"]}}}
        await self.ws.send(json.dumps(sm))
        rr = await self.ws.recv(decode=False)
        sr = json.loads(rr.decode("utf-8"))

        im = {"client_content": {"turns": [{"role": "user", "parts": [{"text": "‰Ω†ÊòØ‰∏ÄÂêç‰∏ì‰∏öÁöÑËã±ËØ≠Âè£ËØ≠ÊåáÂØºËÄÅÂ∏àÔºå‰Ω†ÈúÄË¶ÅÂ∏ÆÂä©Áî®Êà∑Á∫†Ê≠£ËØ≠Ê≥ïÂèëÈü≥ÔºåÁî®Êà∑Â∞Ü‰ºöËØ¥‰∏ÄÂè•Ëã±ÊñáÔºåÁÑ∂Âêé‰Ω†‰ºöÁªôÂá∫ËØÜÂà´Âá∫Êù•ÁöÑËã±ËØ≠ÊòØ‰ªÄ‰πàÔºåÂπ∂‰∏îÂëäËØâ‰ªñÂèëÈü≥‰∏≠Êúâ‰ªÄ‰πàÈóÆÈ¢òÔºåËØ≠Ê≥ïÊúâ‰ªÄ‰πàÈîôËØØÔºåÂπ∂‰∏î‰∏ÄÊ≠•‰∏ÄÊ≠•ÁöÑÁ∫†Ê≠£‰ªñÁöÑÂèëÈü≥ÔºåÂΩì‰∏ÄÊ¨°ÂèëÈü≥Ê≠£Á°ÆÂêéÔºåÊ†πÊçÆÂΩìÂâçËØ≠Âè•ÊèêÂá∫‰∏ã‰∏Ä‰∏™Âú∫ÊôØÁöÑËØ≠Âè•,ÁÑ∂Âêé‰∏ÄÁõ¥Âæ™ÁéØËøô‰∏™ËøáÁ®ãÔºåÁõ¥Âà∞Áî®Êà∑ËØ¥OKÔºåÊàëË¶ÅÈÄÄÂá∫„ÄÇ‰Ω†ÁöÑÂõûÁ≠îÊ∞∏ËøúË¶Å‰øùÊåÅ‰∏≠Êñá„ÄÇÂ¶ÇÊûúÊòéÁôΩ‰∫ÜËØ∑ÂõûÁ≠îOK‰∏§‰∏™Â≠ó"}]}], "turn_complete": True}}
        await self.ws.send(json.dumps(im))
        cr = []
        async for rr in self.ws:
            r = json.loads(rr.decode("utf-8"))
            try:
                if "serverContent" in r:
                    p = r["serverContent"].get("modelTurn", {}).get("parts", [])
                    for pt in p:
                        if "text" in pt:
                            cr.append(pt["text"])
            except Exception:
                pass

            try:
                tc = r["serverContent"]["turnComplete"]
            except KeyError:
                pass
            else:
                if tc:
                    if "".join(cr).startswith("OK"):
                        print("ÂàùÂßãÂåñÂÆåÊàê ‚úÖ")
                        return

    async def la(self):
        pa = pyaudio.PyAudio()
        mi = pa.get_default_input_device_info()
        st = pa.open(format=F, channels=C, rate=SSR, input=True, input_device_index=mi["index"], frames_per_buffer=CS)
        c = Console()
        c.print("üé§ ËØ¥‰∏ÄÂè•Ëã±ËØ≠ÂêßÔºÅÊØîÂ¶Ç: What is blockchain?", style="yellow")
        while True:
            d = await asyncio.to_thread(st.read, CS)
            ad = [abs(int.from_bytes(d[i:i + 2], byteorder='little', signed=True)) for i in range(0, len(d), 2)]
            v = sum(ad) / len(ad)
            if v > 200:
                if self.s == 0:
                    c.print("üé§ :", style="yellow", end="")
                    self.s += 1
                c.print("*", style="green", end="")
            self.q.put_nowait(d)

    async def sa(self):
        while True:
            ch = await self.q.get()
            m = {"realtime_input": {"media_chunks": [{"data": base64.b64encode(ch).decode(), "mime_type": "audio/pcm"}]}}
            await self.ws.send(json.dumps(m))

    async def ra(self):
        c = Console()
        cr = []
        async for rr in self.ws:
            if self.s == 1:
                c.print("\n‚ôªÔ∏è Â§ÑÁêÜ‰∏≠Ôºö", end="")
                self.s += 1
            r = json.loads(rr.decode("utf-8"))
            try:
                if "serverContent" in r:
                    p = r["serverContent"].get("modelTurn", {}).get("parts", [])
                    for pt in p:
                        if "text" in pt:
                            cr.append(pt["text"])
                            c.print("-", style="blue", end="")
            except Exception:
                pass

            try:
                tc = r["serverContent"]["turnComplete"]
            except KeyError:
                pass
            else:
                if tc:
                    if cr:
                        t = "".join(cr)
                        c.print("\nü§ñ =============================================", style="yellow")
                        c.print(Markdown(t))
                        cr = []
                        self.s = 0

    async def r(self):
        async with connect(u, additional_headers={"Content-Type": "application/json"}) as ws:
            self.ws = ws
            c = Console()
            c.print("Gemini Ëã±ËØ≠Âè£ËØ≠Âä©Êâã", style="green", highlight=True)
            c.print("Make by twitter: @BoxMrChen", style="blue")
            c.print("============================================", style="yellow")
            await self.srt()
            async with asyncio.TaskGroup() as tg:
                tg.create_task(self.la())
                tg.create_task(self.sa())
                tg.create_task(self.ra())

                def ce(t):
                    if t.cancelled():
                        return
                    if t.exception() is None:
                        return
                    e = t.exception()
                    print(f"Error: {e}")
                    sys.exit(1)

                for t in tg._tasks:
                    t.add_done_callback(ce)


if __name__ == "__main__":
    m = AL()
    asyncio.run(m.r())